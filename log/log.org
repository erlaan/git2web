#+AUTHOR: Jonatan Haltorp
#+AUTHOR: Jonathan Erlandsson

* git2web
** Prototypen
   Vi kan iterera över en branchs log genom följande kod. repo är ett
   `pygit2.repository.Repository-object`.

   ```python
master = repo.lookup_branch('master')
for logEntry in master.log():
    print(logEntry.commiter, logEntry.message, logEntry.oid_new, logEntry.oid_old)
   ```
   :note-jh: Flowchart för att bygga upp 'kartan' just nu skulle nog kunna
   fungera på det här viset:
   Repo -> branches
   branch -> log # <- detta ger oss lista över en branch's commits
   branch -> commit # via branch.get_object()
   commit -> diff # via commit.tree.diff_to_?
   diff -> stats # via diff.stats.{insertions, files_changed, deletions}
   diff -> patch # via diff.patch
** Utvecklingen
*** Libraries
    Generellt så tar python-modulen pygit2 in en dependency i form utav
    libgit2, utan libgit2 på systemet kommer `make venvprepare` inte fungera.

**** Python
     *Jinja2* kan vi använda för templating
     jinja docs: http://jinja.pocoo.org/docs/dev/intro/
     *pygit2* kan vi använda för att vrida & vända på ett git repo
     pygit2 docs: http://www.pygit2.org/

     :note-jh: jag har användt jinja när jag bloggat med jekyll, vet
     lite hur det fungerar. pygit2 vet jag inte hur det fungerar, men 
     det verkar iaf som man har ganska mycket kontrol över saker och ting.
     
** Frågetecken
    Frågor kring Organisation & resurser, dokumentation
** Mål
*** visualisera brancher & commits i grafer
*** Använda git för VC
*** Programmera i HTML, Javascript, CSS & Python
     CSS:  Bootstrap
     HTML: HTML5boilerplate
     JS:   React.js
     Python: Django 

     :note-jh: HTML5boilerplate känns rätt onödigt, jag känner att vi kan skippa den.

*** Statiskt genererade HTML-filer
     Fördel: snabbare än dynamiska sidor
     Specifikt Mål: Möjlighet att lägga in en hook då man commitar.
         
*** Visa olika tips kring hur man kan använda git
